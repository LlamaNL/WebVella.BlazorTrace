@namespace WebVella.BlazorTrace
@inherits WvBlazorTraceComponentBase
@using WebVella.BlazorTrace.Models

<script>
	@((MarkupString)_jsContent)
</script>
<style>
	@((MarkupString)_cssContent)
</style>

@if (Position != WvButtonPosition.Hidden)
{
	<div class="@_buttonClasses">
		<button type="button" @onclick=_show title="WebVella BlazorTrace (F1)" style="@_buttonStyles">
			<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16">
				<path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053.918 3.995.78 5.323 1.508 7H.43c-2.128-5.697 4.165-8.83 7.394-5.857q.09.083.176.171a3 3 0 0 1 .176-.17c3.23-2.974 9.522.159 7.394 5.856h-1.078c.728-1.677.59-3.005.108-3.947C13.486.878 10.4.28 8.717 2.01zM2.212 10h1.315C4.593 11.183 6.05 12.458 8 13.795c1.949-1.337 3.407-2.612 4.473-3.795h1.315c-1.265 1.566-3.14 3.25-5.788 5-2.648-1.75-4.523-3.434-5.788-5" />
				<path d="M10.464 3.314a.5.5 0 0 0-.945.049L7.921 8.956 6.464 5.314a.5.5 0 0 0-.88-.091L3.732 8H.5a.5.5 0 0 0 0 1H4a.5.5 0 0 0 .416-.223l1.473-2.209 1.647 4.118a.5.5 0 0 0 .945-.049l1.598-5.593 1.457 3.642A.5.5 0 0 0 12 9h3.5a.5.5 0 0 0 0-1h-3.162z" />
			</svg>
		</button>
	</div>
}

@if (_modalVisible)
{
	<div title="click to close (Esc)" class="wv-trace-overlay" @onclick=_hide></div>
	<div class="wv-trace-modal">
		<div class="wv-trace-modal__header">
			<div class="wv-trace-modal__header__left">
				<span class="wv-trace-modal__header__left__icon">
					<span>
						<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16">
							<path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053.918 3.995.78 5.323 1.508 7H.43c-2.128-5.697 4.165-8.83 7.394-5.857q.09.083.176.171a3 3 0 0 1 .176-.17c3.23-2.974 9.522.159 7.394 5.856h-1.078c.728-1.677.59-3.005.108-3.947C13.486.878 10.4.28 8.717 2.01zM2.212 10h1.315C4.593 11.183 6.05 12.458 8 13.795c1.949-1.337 3.407-2.612 4.473-3.795h1.315c-1.265 1.566-3.14 3.25-5.788 5-2.648-1.75-4.523-3.434-5.788-5" />
							<path d="M10.464 3.314a.5.5 0 0 0-.945.049L7.921 8.956 6.464 5.314a.5.5 0 0 0-.88-.091L3.732 8H.5a.5.5 0 0 0 0 1H4a.5.5 0 0 0 .416-.223l1.473-2.209 1.647 4.118a.5.5 0 0 0 .945-.049l1.598-5.593 1.457 3.642A.5.5 0 0 0 12 9h3.5a.5.5 0 0 0 0-1h-3.162z" />
						</svg>
					</span>
				</span>
				<span class="wv-trace-modal__header__left__title">WebVella BlazorTrace</span>
			</div>
			<div class="wv-trace-modal__header__center">
				@if (_data is not null)
				{
					<div class="wv-trace-modal__header__center__text">compare: </div>
					<div class="wv-trace-modal__header__center__selector @_primarySnHighlightClass">
						<InputSelect @bind-Value="@_data!.Request.PrimarySnapshotId" @bind-Value:after="@_submitFilter">
							<option value="">current</option>
							@foreach (var option in _data.SnapshotList)
							{
								<option value="@option.Id">@option.Name</option>
							}
						</InputSelect>
					</div>
					<div class="wv-trace-modal__header__center__text">to</div>
					<div class="wv-trace-modal__header__center__selector">
						<InputSelect @bind-Value="@_data!.Request.SecondarySnapshotId" @bind-Value:after="@_submitFilter">
							<option value="">current + memory info</option>
							@foreach (var option in _data.SnapshotList)
							{
								<option value="@option.Id">@option.Name</option>
							}
						</InputSelect>
					</div>
					<div class="wv-trace-modal__divider"></div>
					<div class="wv-trace-modal__header__center__clear">
						<button class="wv-mute" type="button"
								@onclick=_clearCurrent
								title="clears logged data for the current session">
							Clear Current
						</button>
					</div>
					<div class="wv-trace-modal__header__center__save">
						@if (_savingState == WvSnapshotSavingState.NotSaving)
						{
							<button class="wv-green" type="button"
									@onclick=_saveSnapshot
									title="saves the current state as snapshot">
								Save Snapshot
							</button>
						}
						else
						{
							<button class="wv-green" type="button"
									disabled
									title="saves the current state as snapshot">
								@(_savingState == WvSnapshotSavingState.Saving ? "Saving" : "Saved!")
							</button>

						}
					</div>
				}
			</div>
			<div class="wv-trace-modal__header__right">
				<button title="Close (Esc)" type="button" class="circle icon" @onclick=_hide>X</button>
			</div>
		</div>

		<div class="wv-trace-modal__subheader">
			<div class="wv-trace-modal__subheader__left">
				<ul class="wv-trace-nav">
					<li>
						<span>Methods:</span>
					</li>
					@foreach (var item in _methodMenu)
					{
						<li class="@(_data?.Request?.Menu == item.Id ? "active" : "")">
							<a href="#" @onclick=@item.OnClick @onclick:preventDefault>@item.Id.WvBTToDescriptionString()</a>
						</li>
					}
				</ul>
				<ul class="wv-trace-nav" style="margin-left:20px;">
					<li>
						<span>Signals:</span>
					</li>
					@foreach (var item in _signalMenu)
					{
						<li class="@(_data?.Request?.Menu == item.Id ? "active" : "")">
							<a href="#" @onclick=@item.OnClick @onclick:preventDefault>@item.Id.WvBTToDescriptionString()</a>
						</li>
					}
				</ul>
			</div>
			<div class="wv-trace-modal__subheader__right">
				<div class="wv-trace-modal__subheader__right__button">
					@if (_data is null || _data.Request is null || !_data.Request.IsAutoRefresh)
					{
						<button class="wv-mute" type="button" title="@($"data auto-reloading on {_infiniteLoopDelaySeconds} seconds is OFF")"
								@onclick=@_enableAutoReload>
							RealTime OFF
						</button>
					}
					else
					{
						<button class="wv-cyan" type="button" title="@($"data auto-reloading on {_infiniteLoopDelaySeconds} seconds is ON")"
								@onclick=@_disableAutoReload>
							RealTime ON
						</button>
					}
				</div>
				<ul class="wv-trace-nav" style="margin-left:20px;">
					@foreach (var item in _asideMenu)
					{
						<li class="@(_data?.Request?.Menu == item.Id ? "active" : "")">
							<a href="#" @onclick=@item.OnClick @onclick:preventDefault>
								<span>@item.Id.WvBTToDescriptionString()</span>
								@((MarkupString)item.CounterHtml)
							</a>
						</li>
					}
					<li>
						<a href="@_helpLink" target="_blank" title="Documentation website">
							<span>Help</span>
							<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16">
								<path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5" />
								<path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0z" />
							</svg>
						</a>
					</li>
				</ul>

			</div>
		</div>
		<div class="wv-trace-modal__body">
			@if (_data is not null)
			{
				@if (_data.Request!.IsMethodMenu)
				{
					<table>
						<thead>
							<tr class="wv-sticky" style="top:-10px;">
								<th style="width:95px">
									@if (_data?.Request is not null && _data.Request.MethodsFilter.HasFilter)
									{
										<button type="button" class="icon wv-accent" @onclick="@(async () => await _clearFilter(typeof(WvTraceModalRequestMethodsFilter)))"
												style="border-width:1px;">
											<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16">
												<path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" />
											</svg>
										</button>
									}
								</th>
								<th>
									<InputText placeholder="module" autocomplete="new-password"
											   @bind-Value=@_data!.Request.MethodsFilter.ModuleFilter
											   @bind-Value:after=_submitFilter />
								</th>
								<th>
									<InputText placeholder="component" autocomplete="new-password"
											   @bind-Value=@_data!.Request.MethodsFilter.ComponentFilter
											   @bind-Value:after=_submitFilter />
								</th>
								<th>
									<InputText placeholder="method" autocomplete="new-password"
											   @bind-Value=@_data!.Request.MethodsFilter.MethodFilter
											   @bind-Value:after=_submitFilter />
								</th>
								<th>
									<InputSelect @bind-Value="@_data!.Request.MethodsFilter.CallsFilter" @bind-Value:after="_submitFilter">
										<option value="">no call filter</option>
										@foreach (var option in Enum.GetValues<WvTraceModalCallsFilter>())
										{
											<option value="@option">@option.WvBTToDescriptionString()</option>
										}
									</InputSelect>
								</th>
								<th>
									<InputSelect TValue="WvTraceModalMemoryFilter?" @bind-Value="@_data.Request.MethodsFilter.MemoryFilter"
												 @bind-Value:after="_submitFilter">
										<option value="">no memory filter</option>
										@foreach (var option in Enum.GetValues<WvTraceModalMemoryFilter>())
										{
											<option value="@option">@option.WvBTToDescriptionString()</option>
										}
									</InputSelect>
								</th>
								<th>
									<InputSelect @bind-Value="@_data.Request.MethodsFilter.DurationFilter" @bind-Value:after="_submitFilter">
										<option value="">no duration filter</option>
										@foreach (var option in Enum.GetValues<WvTraceModalDurationFilter>())
										{
											<option value="@option">@option.WvBTToDescriptionString()</option>
										}
									</InputSelect>
								</th>
								<th>
									<InputSelect @bind-Value="@_data.Request.MethodsFilter.LimitsFilter" @bind-Value:after="_submitFilter">
										<option value="">no limit filter</option>
										@foreach (var option in Enum.GetValues<WvTraceModalLimitsFilter>())
										{
											<option value="@option">@option.WvBTToDescriptionString()</option>
										}
									</InputSelect>
								</th>
							</tr>
							@foreach (var item in _data.MethodTraceRows.Where(x => x.IsPinned))
							{
								<WvBlazorTraceRow @key=item.Id Item="item" Class="wv-pinned-row wv-selected-row"
												  OnTraceListView="_showTraceListModal"
												  OnMemoryView="_showMemoryModal"
												  OnPin="_pinClicked"
												  OnLimitView="_showLimitModal"
												  OnMute="_showTraceMuteModal" />
							}
						</thead>
						<tbody>
							@if (_loadingData)
							{
								<tr>
									<td colspan="8" style="padding:30px;text-align:center;">Loading ....</td>
								</tr>
							}
							else
							{
								<Virtualize Items="_data.MethodTraceRows.Where(x => !x.IsPinned).ToList()" Context="item" TItem="WvMethodTraceRow">
									<WvBlazorTraceRow @key=@item.Id Item="@item"
													  OnTraceListView="_showTraceListModal"
													  OnMemoryView="_showMemoryModal"
													  OnPin="_pinClicked"
													  OnLimitView="_showLimitModal"
													  OnMute="_showTraceMuteModal" />
								</Virtualize>
								@if (_data.MethodTraceRows.Count == 0)
								{
									<tr>
										<td colspan="8" style="padding:30px;text-align:center;">No tracers are logged yet</td>
									</tr>
								}
							}
						</tbody>
					</table>
				}
				else if (_data.Request!.IsSignalMenu)
				{
					<table>
						<thead>
							<tr class="wv-sticky" style="top:-10px;">
								<th style="width:95px">
									@if (_data?.Request is not null && _data.Request.SignalsFilter.HasFilter)
									{
										<button type="button" class="icon wv-accent" @onclick="@(async () => await _clearFilter(typeof(WvTraceModalRequestSignalsFilter)))"
												style="border-width:1px;">
											<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16">
												<path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" />
											</svg>
										</button>
									}
								</th>
								<th>
									<InputText placeholder="signal name" autocomplete="new-password"
											   @bind-Value=@_data!.Request.SignalsFilter.SignalNameFilter
											   @bind-Value:after=_submitFilter />
								</th>
								<th>
									<InputSelect @bind-Value="@_data!.Request.SignalsFilter.CallsFilter" @bind-Value:after="_submitFilter">
										<option value="">no call filter</option>
										@foreach (var option in Enum.GetValues<WvTraceModalCallsFilter>())
										{
											<option value="@option">@option.WvBTToDescriptionString()</option>
										}
									</InputSelect>
								</th>
								<th>
									<InputSelect @bind-Value="@_data.Request.SignalsFilter.LimitsFilter" @bind-Value:after="_submitFilter">
										<option value="">no limit filter</option>
										@foreach (var option in new List<WvTraceModalLimitsFilter> {
							WvTraceModalLimitsFilter.HasLimitHits,
							WvTraceModalLimitsFilter.ZeroLimitHits
							})
										{
											<option value="@option">@option.WvBTToDescriptionString()</option>
										}
									</InputSelect>
								</th>
							</tr>
							@foreach (var item in _data.SignalTraceRows.Where(x => x.IsPinned))
							{
								<WvBlazorTraceSignalRow @key=item.Id Item="item" Class="wv-pinned-row wv-selected-row"
														OnTraceListView="_showTraceListModal"
														OnPin="_pinClicked"
														OnLimitView="_showLimitModal"
														OnMute="_showTraceMuteModal" />
							}
						</thead>
						<tbody>
							@if (_loadingData)
							{
								<tr>
									<td colspan="4" style="padding:30px;text-align:center;">Loading ....</td>
								</tr>
							}
							else
							{
								<Virtualize Items="_data.SignalTraceRows.Where(x => !x.IsPinned).ToList()" Context="item" TItem="WvSignalTraceRow">
									<WvBlazorTraceSignalRow @key=item.Id Item="item"
															OnTraceListView="_showTraceListModal"
															OnPin="_pinClicked"
															OnLimitView="_showLimitModal"
															OnMute="_showTraceMuteModal" />
								</Virtualize>
								@if (_data.SignalTraceRows.Count == 0)
								{
									<tr>
										<td colspan="4" style="padding:30px;text-align:center;">No tracers are logged yet</td>
									</tr>
								}
							}
						</tbody>
					</table>
				}
				else if (_data.Request!.IsSnapshotMenu)
				{
					<table>
						<thead>
							<tr>
								<th style="width:100px"></th>
								<th style="width:140px">created on</th>
								<th>name</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var item in _data.SnapshotList.OrderBy(x => x.CreatedOn))
							{
								<tr @key=item.Id>
									<td style="padding:0 10px;">
										<button class="wv-accent" style="margin-right:10px;" @onclick=item.OnRemove!>remove</button>
									</td>
									<td>@item.CreatedOn.ToString("yyyy-MM-dd HH:mm:ss")</td>
									<td>
										<InputText placeholder="date string if empty" autocomplete="new-password"
												   @bind-Value=@item.Name
												   @bind-Value:after=item.OnRename! />
									</td>

								</tr>
							}
							@if (_data.SnapshotList.Count == 0)
							{
								<tr>
									<td colspan="3" style="padding:30px;text-align:center;">No snapshots saved yet</td>
								</tr>
							}
						</tbody>
					</table>
				}
				else if (_data.Request!.IsTraceMuteMenu)
				{
					<table>
						<thead>
							<tr class="wv-sticky" style="top:-10px;">
								<th style="width:40px">
									@if (_data?.Request is not null && _data.Request.MutedFilter.HasFilter)
									{
										<button type="button" class="icon wv-accent" @onclick="@(async () => await _clearFilter(typeof(WvTraceModalRequestMutedFilter)))"
												style="border-width:1px;">
											<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16">
												<path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" />
											</svg>
										</button>
									}
								</th>
								<th>
									<InputText placeholder="type" autocomplete="new-password"
											   @bind-Value=@_data!.Request.MutedFilter.TypeFilter
											   @bind-Value:after=_submitFilter />
								</th>
								<th>
									<InputText placeholder="module" autocomplete="new-password"
											   @bind-Value=@_data!.Request.MutedFilter.ModuleFilter
											   @bind-Value:after=_submitFilter />
								</th>
								<th>
									<InputText placeholder="component" autocomplete="new-password"
											   @bind-Value=@_data!.Request.MutedFilter.ComponentFilter
											   @bind-Value:after=_submitFilter />
								</th>
								<th>
									<InputText placeholder="instance tag" autocomplete="new-password"
											   @bind-Value=@_data!.Request.MutedFilter.InstanceTag
											   @bind-Value:after=_submitFilter />
								</th>
								<th>
									<InputText placeholder="method" autocomplete="new-password"
											   @bind-Value=@_data!.Request.MutedFilter.MethodFilter
											   @bind-Value:after=_submitFilter />
								</th>
								<th>
									<InputText placeholder="signal" autocomplete="new-password"
											   @bind-Value=@_data!.Request.MutedFilter.SignalFilter
											   @bind-Value:after=_submitFilter />
								</th>
								<th>
									<InputText placeholder="field" autocomplete="new-password"
											   @bind-Value=@_data!.Request.MutedFilter.FieldFilter
											   @bind-Value:after=_submitFilter />
								</th>
								<th>
									<InputText placeholder="custom data" autocomplete="new-password"
											   @bind-Value=@_data!.Request.MutedFilter.CustomDataFilter
											   @bind-Value:after=_submitFilter />
								</th>
								<th>
									<InputText placeholder="pin" autocomplete="new-password"
											   @bind-Value=@_data!.Request.MutedFilter.PinFilter
											   @bind-Value:after=_submitFilter />
								</th>

							</tr>
						</thead>
						<tbody>
							<Virtualize Items="_data.MutedTraceRows" Context="item" TItem="WvTraceMute">
								<tr @key=@item.Id>
									<td class="wv-button">
										<button type="button" class="icon wv-accent" title="unmute trace" @onclick=@(()=> _muteTraceChange(item))>
											<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16">
												<path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
												<path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
											</svg>
										</button>
									</td>
									<td>@((MarkupString)item.Type.WvBTToDescriptionString())</td>
									<td>@((MarkupString)(String.IsNullOrWhiteSpace(item.Module) ? "<span class='wv-mute'>undefined</span>" : item.Module))</td>
									<td>@((MarkupString)(String.IsNullOrWhiteSpace(item.ComponentName) ? "<span class='wv-mute'>undefined</span>" : item.ComponentName))</td>
									<td>@((MarkupString)(String.IsNullOrWhiteSpace(item.InstanceTag) ? "<span class='wv-mute'>undefined</span>" : item.InstanceTag))</td>
									<td>@((MarkupString)(String.IsNullOrWhiteSpace(item.Method) ? "<span class='wv-mute'>undefined</span>" : item.Method))</td>
									<td>@((MarkupString)(String.IsNullOrWhiteSpace(item.Signal) ? "<span class='wv-mute'>undefined</span>" : item.Signal))</td>
									<td>@((MarkupString)(String.IsNullOrWhiteSpace(item.Field) ? "<span class='wv-mute'>undefined</span>" : item.Field))</td>
									<td>@((MarkupString)(String.IsNullOrWhiteSpace(item.CustomData) ? "<span class='wv-mute'>undefined</span>" : item.CustomData))</td>
									<td>
										@if (item.IsPinned is not null)
										{
											<span>@item.IsPinned.Value.ToString()</span>
										}
										else
										{
											<span class='wv-mute'>undefined</span>
										}
									</td>
								</tr>
							</Virtualize>
							@if (_currentMutes.Count == 0)
							{
								<tr>
									<td colspan="10" style="padding:30px;text-align:center;">No traces are muted yet</td>
								</tr>
							}
						</tbody>
					</table>
				}
			}
		</div>
		<div class="wv-trace-modal__footer">
			<button title="Close [Esc]" type="button" @onclick=_hide>Close [Esc]</button>
		</div>
	</div>

	<WvBlazorTraceListModal @ref=_traceListModal NestLevel="1" />
	<WvBlazorTraceSignalTraceListModal @ref=_signalTraceListModal NestLevel="1" />
	<WvBlazorTraceMemoryModal @ref=_memoryModal NestLevel="1" />
	<WvBlazorTraceLimitModal @ref=_limitModal NestLevel="1" />
	<WvBlazorTraceSignalLimitModal @ref=_signalLimitModal NestLevel="1" />
	<WvBlazorTraceMuteMethodModal @ref=_traceMuteModal NestLevel="1" OnChange="_muteTraceChange" TraceMutes="_currentMutes" />
	<WvBlazorTraceMuteSignalModal @ref=_signalMuteModal NestLevel="1" OnChange="_muteTraceChange" TraceMutes="_currentMutes" />
}





