@inject IWvBlazorTraceService WvBlazorTraceService
<div style="padding-top:15px">
	Counter 2: @_counter
</div>
<div style="padding-top:15px">
	Parent: @ParentCounter
</div>
<div style="padding-top:5px">
	<button @onclick=_count>Count</button>
</div>

@code {
	[Parameter] public int ParentCounter { get; set; } = 0;
	private int _counter = 0;


	protected override void OnInitialized()
	{
		base.OnInitialized();
		WvBlazorTraceService.OnEnter(this);
		WvBlazorTraceService.OnExit(this);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		WvBlazorTraceService.OnEnter(this, firstRender: firstRender);
		await Task.Delay(10);
		await InternalMethod();
		WvBlazorTraceService.OnExit(this, firstRender: firstRender);
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
		WvBlazorTraceService.OnEnter(this);

		WvBlazorTraceService.OnExit(this);
	}

	protected override bool ShouldRender()
	{
		WvBlazorTraceService.OnEnter(this);

		WvBlazorTraceService.OnExit(this);
		return base.ShouldRender();
	}


	private async Task InternalMethod()
	{
		WvBlazorTraceService.OnEnter(this);
		await Task.Delay(10);
		WvBlazorTraceService.OnExit(this);
	}


	private async Task _count()
	{
		WvBlazorTraceService.OnEnter(component: this);
		await Task.Delay(10);
		_counter++;
		WvBlazorTraceService.OnExit(component: this);
	}
}
